# version: 2.1
# orbs:
#   aws-cli: circleci/aws-cli@0.1.18
# jobs:
#   build_project:
#     working_directory: ~/circle-ci-s3-deploy
#     docker:
#       - image: node:10.15.3
#     steps:
#       - checkout
#       - run:
#           name: Installing dependencies
#           command: npm install
#       - run:
#           name: Building project
#           command: npm run build
#       - persist_to_workspace:
#           root: .
#           paths:
#             - .
#   deploy_project:
#     executor: aws-cli/default
#     steps:
#       - attach_workspace:
#           at: .
#       - aws-cli/setup:
#           profile-name: default
#       - run:
#           name: Upload file to S3
#           command: aws s3 sync ./dist/client-front-end s3://reportyfrontend --delete

# workflows:
#   version: 2
#   build:
#     jobs:
#       - build_project:
#           filters:
#               branches:
#                 only: master
#       - deploy_project:
#           requires:
#             - build_project
#           context: aws-context
#           filters:
#             branches:
#               only: master
version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: korobokvk/reporty-client-front-end
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
            at: /tmp/workspace
      - setup_remote_docker
      - run:
            name: Load archived Docker image
            command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKER_PASS" | docker login --username "$DOCKER_USER" --password-stdin
            docker push $IMAGE_NAME:latest
workflows:
  version: 2
  build-master:
    jobs:
      - build
      - publish-latest:
          requires:
            - build
